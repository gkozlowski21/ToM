%%%%%%%%%%%%%%%%%
%Giles Story London 2023, adapted from Sam Ereira 2021

% Model function for agent specific learning model

% INPUTS:

% p:    a vector of parameter indices; indexes r.opt_idx to recover
%       full parameter vector
%r:     structure containing input settings, (see FBT_config.m)
%sj:    subject number
%mu:    array of prior means for parameters
%nui:   inverse prior covariance matrix for parameters
%doprior: logical, if set to 1 use prior, if set to 0 do ML

% OUTPUTS:
%
% l:  Posterior probability of data given current parameter setting
% Bs: Model estimated belief about p_Self on each trial
% Bo: Model estimated belief about p_Other on each trial
% RP_hat: Fitted responses, including choice noise

function [l,model_acc,avg_action_prob,OtherPr,SelfPr,abs_error]=FBT_llfun(p,r,sj)

X = r.subjects(sj).data;
Cue = [X().cue];  %trial type - privileged (1), shared (2) or decoy (3)
Obsv = [X().outcome]; %outcome - 0 or 1
trialID = [X().trial]; %trial number

%Subject's probability estimates
RP=r.subjects(sj).RP; 
%Index of probe trials 1=self 2=other
probe=[X().probe]; 
%Transform parameters into bounded space
r.pfix(r.opt_idx) = p';
p_tr =  sigmtr(r.pfix,r.LB,r.UB,50);

%Name params
if sum(contains(r.model, 'alpha')) == 4     % 1 learning rate for all agents across solo and shared trials
    alphaS_solo=p_tr(1);
    alphaO_solo=p_tr(2);
    alphaS_shar=p_tr(3);
    alphaO_shar=p_tr(4);
elseif sum(contains(r.model, 'alpha')) == 2 % separate learning rates for each agent with maintained LR across solo and shared trials
    alphaS_solo=p_tr(1);
    alphaS_shar=p_tr(1);
    alphaO_solo=p_tr(2);
    alphaO_shar=p_tr(2);
elseif  sum(contains(r.model, 'alpha')) == 1 % separate learning rates for each agent and across solo and shared trials
    alphaS_solo=p_tr(1);
    alphaS_shar=p_tr(1);
    alphaO_solo=p_tr(1);
    alphaO_shar=p_tr(1);
else
    alphaS_solo=.2;
    alphaS_shar=.2;
    alphaO_solo=.2;
    alphaO_shar=.2;
end

if sum(contains(r.model, 'tau')) == 2      % different temperatures for each agent 
    tauS=p_tr(5);
    tauO=p_tr(6);
elseif sum(contains(r.model, 'tau')) == 1  % single temperature across agents
    tauS=p_tr(5);
    tauO=p_tr(5);
end

if sum(contains(r.model, 'delta')) == 2     % separate decays for each agent
    deltaS=p_tr(7);
    deltaO=p_tr(8);
elseif sum(contains(r.model, 'delta')) == 1 % single decay across agents
    deltaS=p_tr(7);
    deltaO=p_tr(7);
else
    deltaS=0;
    deltaO=0;
end

if sum(contains(r.model, 'lambda')) == 2    % different leak parameter for each agent
    lambdaS=p_tr(9);
    lambdaO=p_tr(10);
elseif sum(contains(r.model,'lambda')) == 1 % single leak for both agents
    lambdaS=p_tr(9);
    lambdaO=p_tr(9);
else
    lambdaS=0;
    lambdaO=0;
end

lp = 0; 

%Loop over trials
Scount = 0;
Ocount = 0;
boundary = 0.0001;
Bs(1) = 0.5;
Bo(1) = 0.5;
last_probe = 1;
N = 10;
u = 0;
for n = 1:length(Cue)
    if ~(strcmp(r.subjects.model_n,'1') || strcmp(r.subjects.model_n,'2'))  
        if trialID(n) == 1  %Reset at the beginning of a new session (because sessions are concatenated)
            Bs(n) = 0.5;
            Bo(n) = 0.5;
        end
        if Cue(n) == 1 %Privileged trial
            if contains(r.subjects.model_n, '21')
                PEs(n) = Obsv(n) - Bs(n);
                PEo(n) = Obsv(n) - Bo(n);
                alphaS = alphaS_solo;
                alphaO = alphaO_solo;
            else
                PEs(n) = Obsv(n) - Bs(n);
                PEo(n) = 0;
                alphaS = alphaS_solo;
                alphaO = alphaO_solo;
            end
        elseif Cue(n) == 2  %Shared trial
                PEs(n) = Obsv(n) - Bs(n);
                PEo(n) = Obsv(n) - Bo(n);
                alphaS = alphaS_shar;
                alphaO = alphaO_shar;
        elseif Cue(n) == 3 %Decoy trial
            if contains(r.subjects.model_n, '20')
                PEo(n) = Obsv(n) - Bo(n);
                PEs(n) = Obsv(n) - Bs(n);
                alphaS = alphaS_solo;
                alphaO = alphaO_solo;
            else
                PEo(n) = Obsv(n) - Bo(n);
                PEs(n) = 0;
                alphaS = alphaS_solo;
                alphaO = alphaO_solo;
            end
        end
     
        if sum(cellfun(@(x) contains(x, 'lambda', 'IgnoreCase', true), r.model)) == 1
            if contains(r.subjects.leak_mode, 'BI')
                Bs(n+1) = Bs(n) + alphaS*(PEs(n)+lambdaO*PEo(n)) +  deltaS*(0.5-Bs(n)) ;
                Bo(n+1) = Bo(n) + alphaO*(PEo(n)+ lambdaS*PEs(n)) + deltaO*(0.5-Bo(n)) ;
            elseif contains(r.subjects.leak_mode, 'PEo_B')
                Bs(n+1) = Bs(n) + alphaS*(PEs(n)+lambdaO*PEo(n)) +  deltaS*(0.5-Bs(n)) ;
                Bo(n+1) = Bo(n) + alphaO*PEo(n)+ deltaO*(0.5-Bo(n)) ;
            elseif contains(r.subjects.leak_mode, 'PEs_FB')
                Bs(n+1) = Bs(n) + alphaS*PEs(n)+ deltaS*(0.5-Bs(n)) ;
                Bo(n+1) = Bo(n) + alphaO*(PEo(n)+ lambdaS*PEs(n)) + deltaO*(0.5-Bo(n)) ;
            end
        elseif sum(cellfun(@(x) contains(x, 'lambda', 'IgnoreCase', true), r.model)) == 2
            Bs(n+1) = Bs(n) + alphaS*(PEs(n)+lambdaO*PEo(n)) +  deltaS*(0.5-Bs(n)) ;
            Bo(n+1) = Bo(n) + alphaO*(PEo(n)+ lambdaS*PEs(n)) + deltaO*(0.5-Bo(n)) ;
        else
            Bs(n+1) = Bs(n) + alphaS*PEs(n)+ deltaS*(0.5-Bs(n)) ;
            Bo(n+1) = Bo(n) + alphaO*PEo(n)+ deltaO*(0.5-Bo(n)) ;
        end

        %Bound extreme estimates to avoid overflow
        Bs(n+1)=max(Bs(n+1),boundary);
        Bs(n+1)=min(Bs(n+1),1-boundary);
        
        Bo(n+1)=max(Bo(n+1),boundary);
        Bo(n+1)=min(Bo(n+1),1-boundary);
        
        %Find likelihood of reported probability from pdf of beta distribution with mode of modelled response     
        if probe(n)==1
            Scount = Scount + 1;
            mu_bf = Bs(n+1);
            
            betaA(n) =  ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^3/(27*tauS^3) + (((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^3/(27*tauS^3) + (- 12*tauS*mu_bf^3 + 16*tauS*mu_bf^2 - 7*tauS*mu_bf + tauS)/(2*tauS) - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)*(3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3))/(6*tauS^2))^2 - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^2/(9*tauS^2) - (3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3)/(3*tauS))^3)^(1/2) + (- 12*tauS*mu_bf^3 + 16*tauS*mu_bf^2 - 7*tauS*mu_bf + tauS)/(2*tauS) - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)*(3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3))/(6*tauS^2))^(1/3) + ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^2/(9*tauS^2) - (3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3)/(3*tauS))/((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^3/(27*tauS^3) + (((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^3/(27*tauS^3) + (- 12*tauS*mu_bf^3 + 16*tauS*mu_bf^2 - 7*tauS*mu_bf + tauS)/(2*tauS) - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)*(3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3))/(6*tauS^2))^2 - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^2/(9*tauS^2) - (3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3)/(3*tauS))^3)^(1/2) + (- 12*tauS*mu_bf^3 + 16*tauS*mu_bf^2 - 7*tauS*mu_bf + tauS)/(2*tauS) - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)*(3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3))/(6*tauS^2))^(1/3) + (- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)/(3*tauS);
            betaB(n) =  (mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)/(3*tauS) + ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^2/(9*tauS^2) - (4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauS))/((((- 12*tauS*mu_bf^3 + 20*tauS*mu_bf^2 - 11*tauS*mu_bf + 2*tauS)/(2*tauS) - (mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^3/(27*tauS^3) + ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauS^2))^2 - ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^2/(9*tauS^2) - (4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauS))^3)^(1/2) + (mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^3/(27*tauS^3) - (- 12*tauS*mu_bf^3 + 20*tauS*mu_bf^2 - 11*tauS*mu_bf + 2*tauS)/(2*tauS) - ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauS^2))^(1/3) + ((((- 12*tauS*mu_bf^3 + 20*tauS*mu_bf^2 - 11*tauS*mu_bf + 2*tauS)/(2*tauS) - (mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^3/(27*tauS^3) + ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauS^2))^2 - ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^2/(9*tauS^2) - (4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauS))^3)^(1/2) + (mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^3/(27*tauS^3) - (- 12*tauS*mu_bf^3 + 20*tauS*mu_bf^2 - 11*tauS*mu_bf + 2*tauS)/(2*tauS) - ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauS^2))^(1/3);

            SelfPr(Scount) = pdf('beta', RP(n), real(betaA(n)), real(betaB(n)));             
        elseif probe(n)==2
            Ocount = Ocount + 1;
            mu_bf = Bo(n+1);
            
            betaA(n) =  ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^3/(27*tauO^3) + (((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^3/(27*tauO^3) + (- 12*tauO*mu_bf^3 + 16*tauO*mu_bf^2 - 7*tauO*mu_bf + tauO)/(2*tauO) - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)*(3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3))/(6*tauO^2))^2 - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^2/(9*tauO^2) - (3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3)/(3*tauO))^3)^(1/2) + (- 12*tauO*mu_bf^3 + 16*tauO*mu_bf^2 - 7*tauO*mu_bf + tauO)/(2*tauO) - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)*(3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3))/(6*tauO^2))^(1/3) + ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^2/(9*tauO^2) - (3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3)/(3*tauO))/((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^3/(27*tauO^3) + (((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^3/(27*tauO^3) + (- 12*tauO*mu_bf^3 + 16*tauO*mu_bf^2 - 7*tauO*mu_bf + tauO)/(2*tauO) - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)*(3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3))/(6*tauO^2))^2 - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^2/(9*tauO^2) - (3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3)/(3*tauO))^3)^(1/2) + (- 12*tauO*mu_bf^3 + 16*tauO*mu_bf^2 - 7*tauO*mu_bf + tauO)/(2*tauO) - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)*(3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3))/(6*tauO^2))^(1/3) + (- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)/(3*tauO);
            betaB(n) =  (mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)/(3*tauO) + ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^2/(9*tauO^2) - (4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauO))/((((- 12*tauO*mu_bf^3 + 20*tauO*mu_bf^2 - 11*tauO*mu_bf + 2*tauO)/(2*tauO) - (mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^3/(27*tauO^3) + ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauO^2))^2 - ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^2/(9*tauO^2) - (4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauO))^3)^(1/2) + (mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^3/(27*tauO^3) - (- 12*tauO*mu_bf^3 + 20*tauO*mu_bf^2 - 11*tauO*mu_bf + 2*tauO)/(2*tauO) - ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauO^2))^(1/3) + ((((- 12*tauO*mu_bf^3 + 20*tauO*mu_bf^2 - 11*tauO*mu_bf + 2*tauO)/(2*tauO) - (mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^3/(27*tauO^3) + ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauO^2))^2 - ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^2/(9*tauO^2) - (4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauO))^3)^(1/2) + (mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^3/(27*tauO^3) - (- 12*tauO*mu_bf^3 + 20*tauO*mu_bf^2 - 11*tauO*mu_bf + 2*tauO)/(2*tauO) - ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauO^2))^(1/3);
    
            OtherPr(Ocount) = pdf('beta', RP(n), real(betaA(n)), real(betaB(n))); %find probability of reported probability from pdf of beta with mode of modelled response              
        end
    else
        if probe(n) == 1 
            if strcmp(r.subjects.model_n,'1')
                CueRun=Cue(last_probe:n);
                OutRun=Obsv(last_probe:n);
            elseif strcmp(r.subjects.model_n,'2')
                if n-N> 0
                    CueRun = Cue(n-N:n);
                    OutRun = Obsv(n-N:n);
                else
                    CueRun = Cue(1:n);
                    OutRun = Obsv(1:n);
                end
            end
            mu_bf=mean(OutRun(CueRun<3)); % exclude self probe trials

            if mu_bf==0
                mu_bf=0.0001;
            elseif mu_bf==1
                mu_bf=1-0.0001;
            end

            %for cases where there are only decoy trials
            if isnan(mu_bf)
                mu_bf=.5;
            end
            last_probe=n;
            Scount=Scount+1;
            
            betaA(n) =  ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^3/(27*tauS^3) + (((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^3/(27*tauS^3) + (- 12*tauS*mu_bf^3 + 16*tauS*mu_bf^2 - 7*tauS*mu_bf + tauS)/(2*tauS) - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)*(3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3))/(6*tauS^2))^2 - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^2/(9*tauS^2) - (3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3)/(3*tauS))^3)^(1/2) + (- 12*tauS*mu_bf^3 + 16*tauS*mu_bf^2 - 7*tauS*mu_bf + tauS)/(2*tauS) - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)*(3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3))/(6*tauS^2))^(1/3) + ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^2/(9*tauS^2) - (3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3)/(3*tauS))/((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^3/(27*tauS^3) + (((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^3/(27*tauS^3) + (- 12*tauS*mu_bf^3 + 16*tauS*mu_bf^2 - 7*tauS*mu_bf + tauS)/(2*tauS) - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)*(3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3))/(6*tauS^2))^2 - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)^2/(9*tauS^2) - (3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3)/(3*tauS))^3)^(1/2) + (- 12*tauS*mu_bf^3 + 16*tauS*mu_bf^2 - 7*tauS*mu_bf + tauS)/(2*tauS) - ((- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)*(3*tauS - 14*mu_bf*tauS + 16*mu_bf^2*tauS + mu_bf^2 - 2*mu_bf^3))/(6*tauS^2))^(1/3) + (- mu_bf^3 + mu_bf^2 - 7*tauS*mu_bf + 3*tauS)/(3*tauS);
            betaB(n) =  (mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)/(3*tauS) + ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^2/(9*tauS^2) - (4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauS))/((((- 12*tauS*mu_bf^3 + 20*tauS*mu_bf^2 - 11*tauS*mu_bf + 2*tauS)/(2*tauS) - (mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^3/(27*tauS^3) + ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauS^2))^2 - ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^2/(9*tauS^2) - (4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauS))^3)^(1/2) + (mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^3/(27*tauS^3) - (- 12*tauS*mu_bf^3 + 20*tauS*mu_bf^2 - 11*tauS*mu_bf + 2*tauS)/(2*tauS) - ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauS^2))^(1/3) + ((((- 12*tauS*mu_bf^3 + 20*tauS*mu_bf^2 - 11*tauS*mu_bf + 2*tauS)/(2*tauS) - (mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^3/(27*tauS^3) + ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauS^2))^2 - ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^2/(9*tauS^2) - (4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauS))^3)^(1/2) + (mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)^3/(27*tauS^3) - (- 12*tauS*mu_bf^3 + 20*tauS*mu_bf^2 - 11*tauS*mu_bf + 2*tauS)/(2*tauS) - ((mu_bf - 4*tauS + 7*mu_bf*tauS - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauS - 18*mu_bf*tauS + 16*mu_bf^2*tauS - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauS^2))^(1/3);
    
            SelfPr(Scount) = pdf('beta', RP(n), real(betaA(n)), real(betaB(n))); 
        elseif probe(n) == 2
            if strcmp(r.subjects.model_n, '1')
                CueRun=Cue(last_probe:n);
                OutRun=Obsv(last_probe:n);
            elseif strcmp(r.subjects.model_n, '2')
                if n-N> 0
                    CueRun = Cue(n-N:n);
                    OutRun = Obsv(n-N:n);
                else
                    CueRun = Cue(1:n);
                    OutRun = Obsv(1:n);
                end
            end

            mu_bf=mean(OutRun(CueRun>1)); % exclude self trials

            if mu_bf==0
                mu_bf=.0001;
            elseif mu_bf==1
                mu_bf=1-0.0001;
            end

            if isnan(mu_bf)
                mu_bf=.5;
            end

            last_probe=n;
            Ocount=Ocount+1;

            betaA(n) =  ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^3/(27*tauO^3) + (((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^3/(27*tauO^3) + (- 12*tauO*mu_bf^3 + 16*tauO*mu_bf^2 - 7*tauO*mu_bf + tauO)/(2*tauO) - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)*(3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3))/(6*tauO^2))^2 - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^2/(9*tauO^2) - (3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3)/(3*tauO))^3)^(1/2) + (- 12*tauO*mu_bf^3 + 16*tauO*mu_bf^2 - 7*tauO*mu_bf + tauO)/(2*tauO) - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)*(3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3))/(6*tauO^2))^(1/3) + ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^2/(9*tauO^2) - (3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3)/(3*tauO))/((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^3/(27*tauO^3) + (((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^3/(27*tauO^3) + (- 12*tauO*mu_bf^3 + 16*tauO*mu_bf^2 - 7*tauO*mu_bf + tauO)/(2*tauO) - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)*(3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3))/(6*tauO^2))^2 - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)^2/(9*tauO^2) - (3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3)/(3*tauO))^3)^(1/2) + (- 12*tauO*mu_bf^3 + 16*tauO*mu_bf^2 - 7*tauO*mu_bf + tauO)/(2*tauO) - ((- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)*(3*tauO - 14*mu_bf*tauO + 16*mu_bf^2*tauO + mu_bf^2 - 2*mu_bf^3))/(6*tauO^2))^(1/3) + (- mu_bf^3 + mu_bf^2 - 7*tauO*mu_bf + 3*tauO)/(3*tauO);
            betaB(n) =  (mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)/(3*tauO) + ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^2/(9*tauO^2) - (4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauO))/((((- 12*tauO*mu_bf^3 + 20*tauO*mu_bf^2 - 11*tauO*mu_bf + 2*tauO)/(2*tauO) - (mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^3/(27*tauO^3) + ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauO^2))^2 - ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^2/(9*tauO^2) - (4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauO))^3)^(1/2) + (mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^3/(27*tauO^3) - (- 12*tauO*mu_bf^3 + 20*tauO*mu_bf^2 - 11*tauO*mu_bf + 2*tauO)/(2*tauO) - ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauO^2))^(1/3) + ((((- 12*tauO*mu_bf^3 + 20*tauO*mu_bf^2 - 11*tauO*mu_bf + 2*tauO)/(2*tauO) - (mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^3/(27*tauO^3) + ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauO^2))^2 - ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^2/(9*tauO^2) - (4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1)/(3*tauO))^3)^(1/2) + (mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)^3/(27*tauO^3) - (- 12*tauO*mu_bf^3 + 20*tauO*mu_bf^2 - 11*tauO*mu_bf + 2*tauO)/(2*tauO) - ((mu_bf - 4*tauO + 7*mu_bf*tauO - 2*mu_bf^2 + mu_bf^3)*(4*mu_bf + 5*tauO - 18*mu_bf*tauO + 16*mu_bf^2*tauO - 5*mu_bf^2 + 2*mu_bf^3 - 1))/(6*tauO^2))^(1/3);
    
            OtherPr(Ocount) = pdf('beta', RP(n), real(betaA(n)), real(betaB(n))); %find probability of reported probability from pdf of beta with mode of modelled response  
        end
    end
    if RP(n) ~= eps
        u = u+1;
        if RP(n) < .1
            upper_bound = .1;
            lower_bound =  0;
        elseif RP(n) >= .9
            upper_bound =  1;
            lower_bound = .9;
        else
            upper_bound = RP(n) +.05;
            lower_bound = RP(n) -.05;
        end
        P_lower = betainc(lower_bound, real(betaA(n)),real(betaB(n)));  % CDF at lower bound  
        P_upper = betainc(upper_bound,real(betaA(n)),real(betaB(n)));  % CDF at upper bound % Find the probability between the bounds 
        action_probs(u) = P_upper-P_lower;
         if betainc(.5, real(betaA(n)), real(betaB(n))) >= .5 && RP(n) <= .499
            acc(u) = 1;
        elseif betainc(.5, real(betaA(n)), real(betaB(n)), "upper") >= .5 && RP(n) >= .499
            acc(u) = 1;
        else
            acc(u) = 0;
         end
         beta_mode = (real(betaA(n))-1) / (real(betaA(n)) + real(betaB(n)) - 2);
         true_val = betainc(RP(n), real(betaA(n)), real(betaB(n)));
         model_val 
         
         abs_error(u) = abs(betainc(RP(n)), real(betaA(n)), real(betaB(n))) - betainc(beta_mode, real(betaA(n)), real(betaB(n))));
    end 
end

betaA = real(betaA);
betaB = real(betaB);

avg_action_prob = mean(action_probs);
model_acc = mean(acc);

[~]=betadist_plot(RP,betaA,betaB,model_acc,avg_action_prob);

%Further check to prevent -inf log likelihoods 
SelfPr=max(SelfPr,eps);
OtherPr=max(OtherPr,eps);

%Calculate likelihood
ll= min(-sum(log([SelfPr, OtherPr])),10000);  %Upper bound neg log likelihood at 10000

%Posterior
l  = sum(ll) +sum(lp);


