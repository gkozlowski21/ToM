function [DCM] = emfit_OPS(r,Np,varargin)
    PLOT=true;
    rng('default'); %GWS
    
    nargin = length(varargin);
    t=varargin;
    if nargin>0 & ~isempty(t{1}); reg         = t{1}; else reg=cell(Np,1);   end;
    if nargin>1 & ~isempty(t{2}); Nsample     = t{2}; else Nsample = 2000;   end;
    if nargin>2 & ~isempty(t{3}); docheckgrad = t{3}; else docheckgrad = 0 ; end;
    if nargin>3 & ~isempty(t{4}); nograd      = t{4}; else nograd = 0 ;      end;
    if nargin>4 & ~isempty(t{5}); maxit       = t{5}; else maxit = 500;      end;
    if nargin>5 & ~isempty(t{6}); dofull      = t{6}; else dofull = 1;       end;
    if nargin>6 & ~isempty(t{7}); savestr     = t{7}; else savestr = '';     end;
    if nargin>7 & ~isempty(t{8}); loadstr     = t{8}; else loadstr = '';     end;
    if nargin>8 & ~isempty(t{9}); dostats     = t{9}; else dostats=1;        end; %GWS
    if nargin>9 & ~isempty(t{10}); doprior_init= t{10}; else doprior_init=1;        end; %GWS
    % Deal with gradients being provided or not    
    % check if regressors have been provided correctly
    if Np~=length(reg);
        error('You must provide a regressor cell entry for each parameter.');
    elseif ~iscell(reg);
        error('REG must be a cell strucure of length Np.');
    end
    
    fstr=str2func(r.objfun);									% GWS prepare function string
    Nsj = length(r.subjects); sjind=1:Nsj;							% number of subjects
    Xreg = repmat(eye(Np),[1 1 Nsj]);
    Nreg=0;
    for j=1:Np
        if size(reg{j},2)==Nsj; reg{j} = reg{j}';end
        for k=1:size(reg{j},2)
            Nreg = Nreg+1;
            Xreg(j,Np+Nreg,:) = reg{j}(:,k);
        end
    end
    
    Npall= Np+Nreg;
    coeff_vec = Inf*ones(Npall,1);
    
    
    %=====================================================================================
    fprintf('\nStarting Variational Laplace estimation');
    pE = r.init_mu; % individual subject parameter estimates
    nu = r.init_nu;

    DCM.U = r;
    DCM.Y = [];
    
    M.L     = @(P,M,U,Y)spm_mdp_L(P,M,U,Y);  % log-likelihood function
    M.pE    = pE;                            % prior means (parameters)
    M.pC    = nu;                            % prior variance (parameters)
    

    % Variational Laplace
    %--------------------------------------------------------------------------
    [Ep,Cp,F] = spm_nlsi_Newton(M,DCM.U,DCM.Y);
    DCM.M = M;
    DCM.Ep = Ep;
    DCM.Cp = Cp;
    DCM.F = F;
    return;
end

function L = spm_mdp_L(P,M,U,Y)
    p = P;
    r = U;
    sj = 1;
    doprior = 0;
    mu = 0;
    nui = 0;

    [l,Bs,Bo,model_acc]=FBT_llfun(p,r,sj,mu,nui,doprior);
    L = -l;
    fprintf('LL: %f \n', L);
end

r.model_acc=model_acc.model_acc;
r.avg_action_prob=model_acc.avg_action_prob;
