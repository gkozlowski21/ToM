clear all;
close all;
rng(23);
dbstop if error

FIT = true;
SIM = true;
doparallel = 0;
options.fit='data';
options.doem=0;
options.doprior_init=1;
options.fitsjs='all';

if ispc
    root = 'L:';
    subject = '669d7a56135e5944f27496f1'; % 5c4ea6cc889752000156dd8e 5590a34cfdf99b729d4f69dc 66368ac547b8824e50cfa854 5fadd628cd4e9e1c42dab969 5fc58cd91b53521031a2d369 5fd5381b5807b616d910c586
    result_dir = 'L:/rsmith/lab-members/osanchez/wellbeing/tom/model_output/';
elseif isunix
    root = '/media/labs/';
    result_dir = getenv('RESULTS');
    subject = getenv('SUBJECT');
end

addpath([root '/rsmith/all-studies/util/spm12/']);
addpath([root '/rsmith/all-studies/util/spm12/toolbox/DEM/']);

experiment_mode = 'prolific';

% Parameter List

% The priors are written in the following order:alphaS_solo, alphaO_solo, alphaS_shared
% alphaO_shared, tauS, tauO, deltaS, deltaO, lambdaS, lambdaO

% IN CASES WHERE FITTING NON-SPLIT PARAMETERS you may call it 'alpha'

% if field contains "alpha" or "lambda", one value of that parameter is fit
DCM.field = {'alphaS_solo','alphaO_solo','alphaS_shared','alphaO_shared','tauS','tauO','deltaS','deltaO','lambdaS','lambdaO'};
% this should be changed in the python script when running multiple models
DCM.model_n = '11';

% DCM.priors    = [.2 .2 .2 .2 .025 .025 .15 .10 .07 .04];
% DCM.prior_std = [.02 .01 .02 .01 .002 .001 .15 .01 .03 .008];
% three possible modes for single leak parameters:

if any(contains(DCM.field, 'alphaS'))
    DCM.priors      = [.2 .2 .2 .2];
    DCM.prior_std   = [.02 .01 .02 .01];
else
    DCM.priors      = [.19 .18 .19 .18];
    DCM.prior_std   = [.02 .01 .02 .01];
end
if any(contains(DCM.field, 'tauS'))
    DCM.priors      = [DCM.priors .02 .02];
    DCM.prior_std   = [DCM.prior_std .002 .001];
else
    DCM.priors      = [DCM.priors .02 .02];
    DCM.prior_std   = [DCM.prior_std .001 .001];
end
if any(contains(DCM.field, 'deltaS'))
    DCM.priors      = [DCM.priors .15 .1];
    DCM.prior_std   = [DCM.prior_std .015 .01];
else
    DCM.priors      = [DCM.priors .1 .1];
    DCM.prior_std   = [DCM.prior_std .02 .02];
end
if any(contains(DCM.field, 'lambdaS'))
    DCM.priors      = [DCM.priors .07 .04];
    DCM.prior_std   = [DCM.prior_std .03 .008];
else
    DCM.priors      = [DCM.priors .04 .04];
    DCM.prior_std   = [DCM.prior_std .008 .008];
end


% PEs_FB only updates false beliefs based on self prediction error
% PEo_B only updates self beliefbased on other prediction error
% BI indicates that the leak is bi-directional
if sum(cellfun(@(x) contains(x, 'lambda', 'IgnoreCase', true), DCM.field)) == 1
    DCM.leak_mode = {};
end

if experiment_mode == "prolific"
    [R] = TOM_fit_prolific(DCM,options,subject,doparallel);
end

% results table %
results_table = table;
results_table.model_n = DCM.model_n;
results_table.ID = subject;
results_table.avg_action_prob = NaN;
results_table.model_acc = NaN;
if isfield(DCM, 'leak_mode')
    results_table.leak_type = DCM.leak_mode{1};
end
for i = 1:length(DCM.field)
    results_table.(['prior_' DCM.field{i}]) = DCM.priors(R.r.opt_idx(i));
end
results_table.F = R.DCM.F;
for i = 1:length(DCM.field)
    results_table.(['posterior_' DCM.field{i}]) = R.DCM.pE(i);
end

writetable(results_table, [result_dir '/tom_fit_' char(subject) '.csv'])

